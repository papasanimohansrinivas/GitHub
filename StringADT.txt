####Problem Description
Write a program, to implement ( abstract data type ) String. Following are the operations:
   substring() : Takes two int index's as parameters and returns the substring between those indexes. (including startIndex and excluding endIndex)
   equals() : Takes a char[] as parameter and returns a boolean indicating whether the parameter char[] exactly matches the given char[] or not
   replace() : Takes two char[] as parameters. In a given char[], it replaces the all occurrences of first parameter char[] with Second parameter char[] and returns the resultant.

# Methods:
   Declare a character array globally.
   Create a class StringADT and a constructor StringADT(char[]) which takes a char[] as parameter and initialize the global character Array.
   1) substring(int, int) return char[]
   2) equals(char[]) return boolean
   3) replace(char[], char[]) return char[]

# NOTE:
   There might be some Exception cases where you need to throw the type of Exception.
   Example: 
      string.substring(-1,3);
      Handle it like, 
         if(condition) throw new IndexOutOfBoundsException("message");

####################### DON'T DELETE .CLASS FILES. DON'T CHANGE ANY FILENAMES ########################

#Follow these instruction to start writing code
1) Understand the question properly 
2) In both the program files, .java and .cpp, implement the above methods and check if the testcases are passed.
3) To build your program, open filepath in Command Prompt and compile, 
   "javac StringADT.java" (or) CTRL+B in Sublime Text Editor
   To see the result of your program:
   "java StringADT"
   To run Test Cases:
   "java TestRunner"
4) To build your program, open filepath in Command Prompt and compile, 
   "g++ StringADT.cpp" (or) CTRL+B in Sublime Text Editor
   If compilation of C++ program is taking time, please change the boolean in Line-3 to false and try. 
   This will disable testcases and compile your program.
   If you want to see testcase result, reset it to true again and try.
   To see the result and run testcases:
   "a.exe"

####Test Cases:
Testcase #1:
string = {'h','e','l','l','o',' ','w','o','r','l','d',',',' ','h','e','l','l','o',' ','m','s','i','t'}
Input: #1 - string.substring(4,9)
Output: {'o',' ','w','o','r'}
Input: #1 - string.equals({'h','e','l','l','o',' ','w','o','r','l','d',',','h','e','l','l','o',' ','m','s','i','t'})
Output: false
Input: #1 - string.replace({'h','e','l','l','o'},{'h','o','l','a'})
Output: {'h','o','l','a',' ','w','o','r','l','d',',',' ','h','o','l','a',' ','m','s','i','t'}

Testcase #2:
string = {' '}
Input: #2 - string.substring(3,2)
Output: "Index Out of Bounds Exception"
Input: #2 - string.equals({' '})
Output: true
Input: #2 - string.replace({' '},{'E','m','p','t','y'})
Output: {'E','m','p','t','y'}

Testcase #3:
string = {'M','S','I','T','E','x','a','m','i','t','e'}
Input: #3 - string.substring(-1,3)
Output: "Index Out of Bounds Exception"
Input: #3 - string.equals({'m','s','i','t','e','x','a','m','i','t','e'})
Output: false
Input: #3 - string.replace({'i','t','e'},{'i','e','t','e'})
Output: {'M','S','I','T','E','x','a','m','i','e','t','e'}