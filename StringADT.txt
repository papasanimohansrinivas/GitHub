####Problem Description
Write a program, to implement ( abstract data type ) String. Following are the operations:
   indexOf(char) : Returns the index of first occurance of the given character in a char[]
   length() : Returns the length of char[]
   count() : Returns the count of occurrences of parameter char[] in a char[]

# Methods:
   Declare a character array globally.
   Create a class StringADT and a constructor StringADT(char[]) which takes a char[] as parameter and initialize the global character Array.
   1) indexOf(char) returns int
   2) length() returns int
   3) count(char[]) return int

####################### DON'T DELETE .CLASS FILES. DON'T CHANGE ANY FILENAMES ########################

#Follow these instruction to start writing code
1) Understand the question properly 
2) In both the program files, .java and .cpp, implement the above methods and check if the testcases are passed.
3) To build your program, open filepath in Command Prompt and compile, 
   "javac StringADT.java" (or) CTRL+B in Sublime Text Editor
   To see the result of your program:
   "java StringADT"
   To run Test Cases:
   "java TestRunner"
4) To build your program, open filepath in Command Prompt and compile, 
   "g++ StringADT.cpp" (or) CTRL+B in Sublime Text Editor
   If compilation of C++ program is taking time, please change the boolean in Line-3 to false and try. 
   This will disable testcases and compile your program.
   If you want to see testcase result, reset it to true again and try.
   To see the result and run testcases:
   "a.exe"

####Test Cases:
Testcase #1:
string = {'m','i','s','s','i','s','s','i','p','p','i'}
Input: #1 - string.indexOf('i')
Output: 1
Input: #1 - string.length()
Output: 11
Input: #1 - string.count({'i','s'})
Output: 2
Input: #1 - string.count({'s'})
Output: 4

Testcase #2:
string = {''}
Input: #2 - string.indexOf('i')
Output: -1
Input: #2 - string.length()
Output: 0
Input: #2 - string.count({'a','b','c'})
Output: 0

Testcase #3:
string = {'h','e','l','l','o','s','l','k','h','e','l','l','o','d','j','l','a','d','f','j','h','e','l','l','o'}
Input: #3 - string.indexOf('L')
Output: -1
Input: #3 - string.length()
Output: 25
Input: #3 - string.count({'h','e','l','l','o','s','l','k','h','e','l','l','o','d','j','l','a','d','f','j','h','e','l','l','o'})
Output: 1
Input: #3 - string.count({'h','e','l','l','o','s','l','k','h','e','l','l','o','d','j','h','k','l','l','a','d','f','j','h','e','l','l','o'})
Output: 0